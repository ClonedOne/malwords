from collections import Counter
from pprint import pprint


def get_stats():
    stats_labels = get_labels_stats()
    print('Number of distinct samples:', stats_labels[0])
    print('Number of distinct families:', stats_labels[1])
    print('Number of singletons:', stats_labels[2])
    print('Average size of families:', stats_labels[3])
    pprint(stats_labels[4].most_common())


def get_labels_stats():
    """
    Reads the labels file generated by AVClass and computes some statistics on it.
    
    :return: stats regarding AVClass labels
    """

    fam_counter = Counter()
    num_samples = 0
    num_singleton = 0

    with open('data/labels.txt', 'r', encoding='utf-8', errors='replace') as labels_file:

        for line in labels_file:
            line = line.strip().split('\t')
            num_samples += 1

            if 'SINGLETON' in line[1]:
                # line[1] = line[1].split(':')[1]
                line[1] = line[1].split(':')[0]
                num_singleton += 1

            fam_counter[line[1]] += 1

    num_fam = len(fam_counter)

    avg_fam_size = 0.0
    for family in fam_counter.most_common():

        if family[0] == 'SINGLETON':
            continue

        avg_fam_size += family[1]

    avg_fam_size = avg_fam_size / num_fam

    return num_samples, num_fam, num_singleton, avg_fam_size, fam_counter


if __name__ == '__main__':
    get_stats()
